     1                                  
     2                                  ;Author Information:                                                                       
     3                                  ;Name:         David Navarro                                                               
     4                                  ;Email:        navarrod253n@csu.fullerton.edu                                                
     5                                  ;Institution:  California State University - Fullerton                                     
     6                                  ;Course:       CPSC 240-01 Assembly Language                                               
     7                                  
     8                                  extern printf
     9                                  extern scanf
    10                                  extern atof
    11                                  extern isfloat
    12                                  global fill                ; Makes function callable from other linked files.
    13                                  
    14                                  section .data
    15 00000000 456E74657220666C6F-         input_message db "Enter float numbers separated by white space. Invalid inputs will be omitted.", 10, 0
    15 00000009 6174206E756D626572-
    15 00000012 732073657061726174-
    15 0000001B 656420627920776869-
    15 00000024 74652073706163652E-
    15 0000002D 20496E76616C696420-
    15 00000036 696E70757473207769-
    15 0000003F 6C6C206265206F6D69-
    15 00000048 747465642E0A00     
    16 0000004F 456E74657220636F6E-         input_message2 db "Enter control+D to terminate.",10,0
    16 00000058 74726F6C2B4420746F-
    16 00000061 207465726D696E6174-
    16 0000006A 652E0A00           
    17 0000006E 257300                      float_format db "%s", 0
    18                                  
    19                                  section .bss
    20                                  
    21                                  section .text
    22                                  
    23                                  fill:
    24                                  
    25 00000000 55                      push rbp
    26 00000001 4889E5                  mov  rbp,rsp
    27 00000004 57                      push rdi                                                    ;Backup rdi
    28 00000005 56                      push rsi                                                    ;Backup rsi
    29 00000006 52                      push rdx                                                    ;Backup rdx
    30 00000007 51                      push rcx                                                    ;Backup rcx
    31 00000008 4150                    push r8                                                     ;Backup r8
    32 0000000A 4151                    push r9                                                     ;Backup r9
    33 0000000C 4152                    push r10                                                    ;Backup r10
    34 0000000E 4153                    push r11                                                    ;Backup r11
    35 00000010 4154                    push r12                                                    ;Backup r12
    36 00000012 4155                    push r13                                                    ;Backup r13
    37 00000014 4156                    push r14                                                    ;Backup r14
    38 00000016 4157                    push r15                                                    ;Backup r15
    39 00000018 53                      push rbx                                                    ;Backup rbx
    40 00000019 9C                      pushf                                                       ;Backup rflags
    41                                  
    42                                  ;Registers rax, rip, and rsp are usually not backed up.
    43 0000001A 6A00                    push qword 0
    44                                  ;-----------------------------INITIALIZE PARAMETERS-----------------------------------------
    45 0000001C 4989FF                  mov r15, rdi                      ; Address of array saved to r15.
    46 0000001F 4989F6                  mov r14, rsi                      ; Max number of elements allowed in array.
    47 00000022 41BD00000000            mov r13, 0                        ; Set counter to 0 elements in Array.
    48                                  
    49                                  ;Display a prompt message asking for inputs
    50 00000028 6A00                    push qword 0
    51 0000002A B800000000              mov rax, 0
    52 0000002F 48BF-                   mov rdi, input_message          ;"Please enter floating point numbers separated by ws. "
    52 00000031 [0000000000000000] 
    53 00000039 E8(00000000)            call printf
    54 0000003E 58                      pop rax
    55                                  
    56 0000003F 6A00                    push qword 0
    57 00000041 B800000000              mov rax, 0
    58 00000046 48BF-                   mov rdi, input_message2         ;"When finished press enter followed by cntl+D."
    58 00000048 [4F00000000000000] 
    59 00000050 E8(00000000)            call printf
    60 00000055 58                      pop rax
    61                                  
    62                                  begin_loop:
    63                                  
    64                                  ;Begin the scanf block
    65 00000056 4881EC00040000          sub rsp, 1024 ;creates room for string
    66 0000005D B800000000              mov rax, 0
    67 00000062 48BF-                   mov rdi, float_format
    67 00000064 [6E00000000000000] 
    68 0000006C 4889E6                  mov rsi, rsp
    69 0000006F E8(00000000)            call scanf
    70                                  
    71                                  ; Tests if Control + D is entered to finish inputing into array.
    72 00000074 4898                    cdqe
    73 00000076 4883F8FF                cmp rax, -1                          
    74 0000007A 743C                    je end_of_loop                          ; If control + D is entered, jump to end_of_loop.
    75                                  
    76                                  ;check for valid input
    77 0000007C 4889E7                  mov rdi, rsp
    78 0000007F E8(00000000)            call isfloat
    79 00000084 4883F800                cmp rax, 0 ;if a zero is returned then it is invalid
    80 00000088 7437                    je invalid
    81                                  
    82                                  ;convert to float 
    83 0000008A B800000000              mov rax, 0                                                                                                            
    84 0000008F 4889E7                  mov rdi,rsp                                                                                                           
    85 00000092 E8(00000000)            call atof
    86 00000097 F2440F10F8              movsd xmm15, xmm0
    87 0000009C 4881C400040000          add rsp, 1024
    88                                  
    89                                  ;mov r11, 1
    90                                  ;cvtsi2sd xmm10, r11 ;converts 1 to float and stores it in xmm10
    91                                  
    92 000000A3 F2440F10F8              movsd xmm15, xmm0
    93                                  ;divsd xmm10, xmm15
    94 000000A8 F2470F113CEF            movsd [r15 + 8 * r13], xmm15            ; Copies user input into array at index of r13.
    95 000000AE 49FFC5                  inc r13                                 ; Increments counter r13 by 1.
    96                                  
    97                                  ;-----------------------------ARRAY CAPACITY TEST-------------------------------------------
    98                                  ; Tests to see if max array capacity has been reached.
    99 000000B1 4D39F5                  cmp r13, r14                            ; Compares # of elements (r13) to capacity (r14).
   100 000000B4 7414                    je exit                                ; If # of elements equals capacity, exit loop.
   101                                  
   102 000000B6 EB9E                    jmp begin_loop
   103                                  
   104                                  end_of_loop:
   105 000000B8 4881C400040000          add rsp, 1024
   106 000000BF EB09                    jmp exit
   107                                  
   108                                  invalid:
   109 000000C1 4881C400040000          add rsp, 1024
   110 000000C8 EB8C                    jmp begin_loop
   111                                  
   112                                  exit:
   113                                  
   114 000000CA 58                      pop rax                        ;Reverse the push near the beginning of this asm function.
   115                                  
   116 000000CB 4C89E8                  mov rax, r13           ;Select the largest value for return to caller.
   117                                  
   118                                  ;===== Restore original values to integer registers ===================================================================
   119 000000CE 9D                      popf                                                        ;Restore rflags
   120 000000CF 5B                      pop rbx                                                     ;Restore rbx
   121 000000D0 415F                    pop r15                                                     ;Restore r15
   122 000000D2 415E                    pop r14                                                     ;Restore r14
   123 000000D4 415D                    pop r13                                                     ;Restore r13
   124 000000D6 415C                    pop r12                                                     ;Restore r12
   125 000000D8 415B                    pop r11                                                     ;Restore r11
   126 000000DA 415A                    pop r10                                                     ;Restore r10
   127 000000DC 4159                    pop r9                                                      ;Restore r9
   128 000000DE 4158                    pop r8                                                      ;Restore r8
   129 000000E0 59                      pop rcx                                                     ;Restore rcx
   130 000000E1 5A                      pop rdx                                                     ;Restore rdx
   131 000000E2 5E                      pop rsi                                                     ;Restore rsi
   132 000000E3 5F                      pop rdi                                                     ;Restore rdi
   133 000000E4 5D                      pop rbp                                                     ;Restore rbp
   134                                  
   135 000000E5 C3                      ret
